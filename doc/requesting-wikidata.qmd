---
title: "Requesting Wikidata"
format: 
  html:
    code-tools:
      source: true
---

```{r}
#| echo: false
#| warning: false
#| error: false
library(tidyverse)
library(tidywikidatar)
tw_enable_cache()
tw_set_cache_folder(path = fs::path(fs::path_home_r(), "R", "tw_data"))
tw_set_language(language = "en")
tw_create_cache_folder(ask = FALSE)

```


## Statement: get all women with an id of Women Film Pionier Project

```{}
#| echo: false
#| warning: false
#| error: false
# Abfrage um alle Personen zu bekommen, die eine Property P7498 = wfpp-id haben
SELECT DISTINCT ?item ?itemLabel WHERE {
  SERVICE wikibase:label { bd:serviceParam wikibase:language "en". }
  {
    SELECT DISTINCT ?item WHERE {
      ?item p:P7498 ?statement0.
      ?statement0 (ps:P7498) _:anyValueP7498.
    }
  }
}

oder 

SELECT DISTINCT ?item ?itemLabel ?value WHERE {
  SERVICE wikibase:label { bd:serviceParam wikibase:language "en". }
  {
    SELECT DISTINCT ?item ?value WHERE {
      ?item wdt:P7498 ?value.      
    }
  }
}

```

## Statement: get all women with an id of Women Film Pionier Project and filmportal
<!-- https://query.wikidata.org/#SELECT%20DISTINCT%20%3Fitem%20%3FitemLabel%20%3Fvalue%20WHERE%20%7B%0A%20%20SERVICE%20wikibase%3Alabel%20%7B%20bd%3AserviceParam%20wikibase%3Alanguage%20%22en%22.%20%7D%0A%20%20%7B%0A%20%20%20%20SELECT%20DISTINCT%20%3Fitem%20%3Fvalue%20WHERE%20%7B%0A%20%20%20%20%20%20%23%20hat%20FilmID%0A%20%20%20%20%20%20%3Fitem%20wdt%3AP2639%20%3Fvalue.%0A%20%20%20%20%20%20%23%20ist%20weiblich%0A%20%20%20%20%20%20%3Fitem%20wdt%3AP21%20wd%3AQ6581072.%0A%20%20%0A%20%20%20%20%20%20%0A%20%20%20%20%7D%0A%20%20%7D%0A%7DLIMIT%2010 -->

mit allen Geschlechtern außer männlich:
<!-- SELECT DISTINCT ?item ?itemLabel ?value WHERE { -->
<!--   SERVICE wikibase:label { bd:serviceParam wikibase:language "en". } -->
<!--   { -->
<!--     SELECT DISTINCT ?item ?value WHERE { -->
<!--       # hat FilmID -->
<!--       ?item wdt:P2639 ?value. -->
<!--       # ist weiblich -->
<!--       VALUES ?o {wd:Q6581072 wd:Q1097630 wd:Q1052281 wd:Q2449503 wd:Q48270} -->  
<!--       ?item wdt:P21 ?o .  -->
<!--     } -->
<!--   } -->
<!-- } -->

```{}
#| echo: false
#| warning: false
#| error: false
# Abfrage um alle Personen zu bekommen, die sowohl eine wfpp-id haben als auch eine filmportal-id
<!-- SELECT DISTINCT ?item ?itemLabel WHERE { -->
<!--   SERVICE wikibase:label { bd:serviceParam wikibase:language "en". } -->
<!--   { -->
<!--     SELECT DISTINCT ?item WHERE { -->
<!--       ?item p:P7498 ?statement0. -->
<!--       ?item p:P2639 ?statement1. -->
<!--       ?statement0 (ps:P7498) _:anyValueP7498. -->
<!--     } -->
<!--   } -->
<!-- } -->

```


## Biografien der Pionierinnen mit WFPP-ID

```{r}

#| echo: false
#| warning: false
#| error: false

### ids für die Frauen via https://query.wikidata.org/# mit der oberen Query abgefragt und im nachfolgenden Verzeichnis gespeichert:
df_wfpp_wikidata_ids <- read_csv("../data/wikidata/women-wfpp.csv") %>% 
  mutate(id_person = str_extract(item, "Q.*$"))

df_wfpp_bio_wikidata_ids <- df_wfpp_wikidata_ids %>% 
  mutate(discription = tw_get_description(id = id_person),
         sex_or_gender_id = tw_get_p(id = id_person, p = "P21") %>% as.character(.),
         citizenship_id = tw_get_p(id = id_person, p = "P27"),
         date_of_birth = tw_get_p(id = id_person, p = "P569", only_first = TRUE) %>% as.character(.),
         place_of_birth_id = tw_get_p(id = id_person, p = "P19"),
         date_of_death = tw_get_p(id = id_person, p = "P570", only_first = TRUE) %>% as.character(.),
         place_of_death_id = tw_get_p(id = id_person, p = "P20"),
         ethnic_group_id = tw_get_p(id = id_person, p = "P172") %>% as.character(.),
         sexual_orientation_id = tw_get_p(id = id_person, p = "P91") %>% as.character(.), 
         wfpp_id = tw_get_p(id = id_person, p = "P7498"), 
         imdb_id = tw_get_p(id = id_person, p = "P345") %>% as.character(.),
         viaf_id =  tw_get_p(id = id_person, p = "P214"),
         gnd_id =  tw_get_p(id = id_person, p = "P227"),
         filmportal_id =  tw_get_p(id = id_person, p = "P2639")
         ) %>% unnest_auto(col = c(citizenship_id)) %>% unnest_auto(col = c(place_of_birth_id)) %>% unnest_auto(col = c(place_of_death_id)) %>% unnest_auto(col = c(wfpp_id))
  # unnest_longer(col = c(sex_or_gender, citizenship, date_of_birth, place_of_birth, date_of_death, ethnic_group, sexual_orientation, wfpp_id, imdb_id), keep_empty = TRUE)

df_wfpp_bio_wikidata <- df_wfpp_bio_wikidata_ids %>% 
  mutate(
         sex_or_gender = tw_get_label(id = sex_or_gender_id),
         citizenship = tw_get_label(id = citizenship_id),
         place_of_birth = tw_get_label(id = place_of_birth_id),
         place_of_death = tw_get_label(id = place_of_death_id),
         ethnic_group = tw_get_label(id = ethnic_group_id),
         sexual_orientation = tw_get_label(id = sexual_orientation_id)
         ) %>% select("name_person" = "itemLabel", id_person, "description" = "discription", sex_or_gender, citizenship, date_of_birth, date_of_death, place_of_birth, place_of_death, ethnic_group, sexual_orientation, wfpp_id, imdb_id)


DT::datatable(df_wfpp_bio_wikidata)

```

## Dürftige Datenlage für ...

Im folgenden Abschnitt werden noch verschiedene Datenpunkte abgefragt, die aber auf den ganzen Datensatz betrachtet eher dürftig ausfallen. Aus diesem Grund wird diese Information vorerst auch nicht verwendet. 

### WFPP-Frauen, die Zeitangaben zu work time haben 

```{r}
#| echo: false
#| warning: false
#| error: false


df_work_time <- df_wfpp_wikidata_ids %>% 
  mutate(start_work_period = tw_get_p(id = id_person, p = "P2031") ,
         end_work_period = tw_get_p(id = id_person, p ="P2032")) %>% 
  unnest(cols = c(start_work_period, end_work_period)) %>% 
  mutate(
         start_work_period = ifelse(!is.na(start_work_period), stringr::str_extract(string = start_work_period, pattern = "[[:digit:]]{4}-[[:digit:]]{2}-[[:digit:]]{2}"), NA),
         end_work_period = ifelse(!is.na(end_work_period), stringr::str_extract(string = end_work_period, pattern = "[[:digit:]]{4}-[[:digit:]]{2}-[[:digit:]]{2}"), NA)
         )

DT::datatable(df_work_time %>% filter(!is.na(start_work_period) | !is.na(end_work_period)) %>% arrange(start_work_period))

```


### Info zu: Wo WFPP-Frauen lebten

```{r}
#| echo: false
#| warning: false
#| error: false
#| 
df_wfpp_residence <- df_wfpp_wikidata_ids %>% 
  mutate(residence = tw_get_p(id = id_person, p="P551", only_first = FALSE)) %>% 
  unnest(residence) %>% 
  # unnest(residence_qualis) %>% 
  mutate(label_residence = tw_get_label(id = residence)) #%>% #,
  

df_residence_quali_ids <- tw_get_qualifiers(id = df_wfpp_wikidata_ids$id_person, p = "P551") 

df_residence_info <- df_residence_quali_ids %>% 
  mutate(person = tw_get_label(id),
         # prop = tw_get_label(property), 
         residence = tw_get_label(qualifier_id),
         start_end = tw_get_property_label(property = qualifier_property),
        date = purrr::map_chr(
           .x = qualifier_value, .f = function(x) {
             if(!is.na(x)){
               if (stringr::str_starts(string = x, pattern = "Q")) {
                 # print("noch ein Q")
                 tw_get_label(id = x, language = "en")
               } else {
                 # print("ohne Q")
                 stringr::str_extract(string = x, pattern = "[[:digit:]]{4}-[[:digit:]]{2}-[[:digit:]]{2}")
               }}
             else{
               NA
             }
           }
         )
    ) %>% 
  select(person, id, residence, start_end, date, set)

DT::datatable(df_residence_info %>% filter(!is.na(residence)))

```


### Info zu: wo WFPP-Frauen arbeiteten

```{r}
#| echo: false
#| warning: false
#| error: false
#| 
df_wfpp_work_location <- df_wfpp_wikidata_ids %>% 
  mutate(work_location = tw_get_p(id = id_person, p = "P937")) %>% 
  unnest(work_location) %>% 
  mutate(label_work_location = tw_get_label(id = work_location))


df_work_location_quali_ids <- tw_get_qualifiers(id = df_wfpp_wikidata_ids$id_person, p = "P937") 

df_work_location_info <- df_work_location_quali_ids %>% 
  mutate(person = tw_get_label(id),
         # prop = tw_get_label(property), 
         work_location = tw_get_label(qualifier_id),
         start_end = tw_get_property_label(property = qualifier_property),
         date = purrr::map_chr(.x = qualifier_value, .f = function(x) {
             if(!is.na(x)){
               if (stringr::str_starts(string = x, pattern = "Q")) {
                 # print("noch ein Q")
                 tw_get_label(id = x, language = "en")
               } else {
                 # print("ohne Q")
                 stringr::str_extract(string = x, pattern = "[[:digit:]]{4}-[[:digit:]]{2}-[[:digit:]]{2}")
               }}
             else{
               NA
             }
           }
         )
    ) %>% 
  select(person, id, work_location, start_end, date, set)

DT::datatable(df_work_location_info %>% filter(!is.na(work_location)))

```


### Info zu: wo WFPP-Frauen beschäftigt waren


```{r}
#| echo: false
#| warning: false
#| error: false

df_wfpp_employed <- df_wfpp_wikidata_ids %>%  
  mutate(worked_at_id = tw_get_p(
      id = id_person,
      p = "P108", # property for employer
      only_first = TRUE
    )) %>% # not only the first result
    unnest(worked_at_id) %>%
    filter(is.na(worked_at_id) == FALSE) %>% # remove those for which we have no employer
    mutate(worked_at_label = tw_get_label(worked_at_id)) %>%
    # but keep in mind we are only interested in the employer if they are a university
    # so we ask what `instance of` the employer is.
    mutate(employer_instance_of = tw_get_p(
      id = worked_at_id,
      p = "P31",
      only_first = TRUE
    )) %>%
    unnest(employer_instance_of) %>%
   mutate(employer_instance_of_label = tw_get_label(employer_instance_of))

DT::datatable(df_wfpp_employed %>% select(id_person, "name_person" = "itemLabel", "worked_at" = "worked_at_label", "employer_type" = "employer_instance_of_label"))

```



## Fragen

Was macht denn eine Filmpionierin aus? Gibt es Kriterien, die sie erfüllen muss? 
Wäre es ausreichend nach Beteiligten in Filmen zu suchen, einerseits die Bedinung "female" haben und andererseits das Attribut "Stummfilm"?

