---
title: "Feministische Filmgeschichte"
toc: true
toc-depth: 4

---

```{r}
#| echo: false
#| warning: false
#| error: false
#| message: false

library(tidyverse)
library(tidygraph)
library(ggraph)
library(igraph)
library(ggiraph)
library(visNetwork)
library(MetBrewer)

source("../config/config-graphic.R")

## Datensätze werden von diesem Script erstellt: https://github.com/mschories/DAVIF/blob/main/gather/merge-data.R
load("../data/doc/df_merged_bio.RData")
load("../data/doc/df_merged_bio_film.RData")

dff_person_bio <- read_csv("../data/dff/dff-person-bio.csv", show_col_types = FALSE)
dff_film <- read_csv(file = "../data/dff/df_dff_person_occupation.csv", show_col_types = F) %>% 
  filter(geschlecht != "M")


```


## Arbeitsgrundlage

Zwei unterschiedliche Sammlungen, zu denen es jeweils Informationen über Personen gibt und zusätzlich Informationen über Filme, in den die Personen mitgewirkt haben.

- Women Film Pioneers Project (wfpp): enthält Informationen zu Frauen: Name, Aliase, Tätigkeiten, Arbeitsorte/-länder, Geburts- und Sterbedatum
- Deutsches Filminstitut & Filmmuseum (dff): enthält Filme: film-id, film-titel, jahreszahl, ordnungsdatum (unterschiedlich präzise, Unsicherheit), Region (wo der Film gedreht wurde? Finanziert? ...), person-id, Person-Name, Geschlecht, Aufgabe/Rolle


## Verarbeitete Datensätze

### DFF

Für die Untersuchungen der DFF-Daten wurde mit den XML-Datensätzen gearbeitet:

- `DAVIF_ FW und P vor 1950 als XML_2022-03-21.xml`: mit Informationen zu Filmen und Mitwirkenden in ihren jeweiligen Rollen
- `DAVIF_ Personen vor 1950 als XML_2022-03-21.xml`: mit Informationen zu Personen

In der ersten XML-Datei sind auch die mitwirkenden Personen zusammen mit ihrer Tätigkeit in Zusammenhang mit dem Film vermerkt. 
Mit Filminformationen verknüpft sind `r dff_film %>% select(uid_2) %>% distinct() %>% nrow()` Personen, ebenso viele sind es in der biografischen Datei. 


### WFPP

**Biografische Daten**
Für das WFPP gibt es zwei biografische Dateien, eine mit Stand von Dezember 2021 und eine aus von Juli 2022. 

- `IT_Projektseminar_data_modified_20211012.csv`: enthält zu allen Frauen eine ID
- `WFPP_metadata_July 10_2022.csv`: hier fehlt eine ID, aber dafür sind mehr Personen enthalten

Diese beiden Dateien enthalten unterschiedliche Informationen, weshalb die neuere Datei die ältere nicht einfach ersetzen kann. Deshalb wurden sie zusammengeführt und um Wikidata-Ids ergänzt ([Link zum Script](https://github.com/mschories/DAVIF/blob/main/analyse/make-wfpp-ids.R)).
In dieser Tabelle ist an den unteren Zeilen abzulesen, welche Frauen schon in Wikidata eingetragen wurden, aber in dem Datensatz vom WFPP vom Juli 22 noch enthalten waren. Für die Arbeit mit WFPP-Pionierinnen lässt sich damit sagen, dass es hilfreich ist ein lebendes Archiv mit in die Analyse einzubeziehen, weil die Erfassung stetig weiterläuft.

Das Ergebnis liegt in [Google-Drive](https://docs.google.com/spreadsheets/d/1ct3rNkiEYrXek7qMvcXOsnM8tNWFicFIi7AZ9AmvanE/edit?usp=sharing) und bildet für alle weiteren Analysen zu WFPP-Daten den Ausgangspunkt.

**Filmografische Daten**
Außerdem gibt es viele kleine Dateien, in denen Pauline jeweils pro Person die Fließtextinformationen von der Website in ein Tabellenformat überführt hat. Um mit diesen Daten strukturiert arbeiten zu können, wurden sie zusammengeführt und auf die biografischen Daten zurückgeführt, so dass es eine Verbindung zwischen den Frauen und den Filmen gibt. Dieser Prozess ist in diesem Script nachzulesen: [parsing wfpp filmography.R](https://github.com/mschories/DAVIF/blob/main/gather/parsing-wfpp-filmography.R)

Der daraus resultierende Datensatz ist hier in [Google-Drive](https://docs.google.com/spreadsheets/d/1-RmWjWyfQ9eM9RCUE1_xUJqEgzLHmqu3Gu8iqf4xKQY/edit?usp=sharing) abgelegt.

## Gemeinsamkeiten der Datensätze

Um Vergleiche zwischen den beiden Sammlungen anstellen zu können, ist es notwendig mit der gleichen Grundgesamtheit zu operieren, heißt, mit möglichst den gleichen Frauen. Führt man alle Informationen zusammen, also die biografischen und filmografischen aus jeweils dem DFF und dem WFPP, bleiben 25 Frauen. 


### Frauen in allen Datensätzen

```{r}
#| echo: false
#| warning: false
#| error: false
#| message: false
# rm(df_merged_bio_films)
# load(file = "../data/doc/df_merged_bio_film.RData")
DT::datatable(df_merged_bio_film)

```


### Übereinstimmende Personen ohne WFPP-filmbezogene Daten

Regelbasiert Übereinstimmungen in Datensätzen auf Basis von Namen zu finden, ist ein heikles Unterfangen und gehört zu einer der kompliziertesten Aufgaben, die es in der Datenarbeit gibt. In beiden Datensätzen werden Frauen mal mit Sonderzeichen geschrieben, mal werden sie weggelassen, manchmal wird der zweite Name abgekürzt. Deshalb ist hier die Wahrscheinlichkeit gegeben, dass es mehr Übereinstimmungen gibt, als bisher gefunden.

Ich habe verschiedene Versuche gestartet: 
- zunächst Name von WFPP mit DFF überprüft (3 Personen exklusiv)
- danach den Namen aus Wikidata und WFPP-Frau überprüft (beide Namensüberprüfungen 44 Treffer Überlappungen, 4 Personen exklusiv)
- Aka-Namen aus dem WFPP mit DFF Namen gecheckt (1 Treffer)
- zum Schluss über Wikidata-IDs von WFPP-und DFF-Personen verbunden (35 Treffer, 2 exklusiv)

```{r}
#| echo: false
#| warning: false
#| error: false
#| message: false

DT::datatable(df_merged_bio %>% select(name, Permalink, wd_id = id_person, id_wfpp = id, filmportal_id, matched, anmerkungen, anmerkunglokal), rownames = FALSE, options = list(pageLength = 54, dom = "t"))

```


### Visualisierung der zehnhäufigst referenzierten Frauen

```{r}
#| echo: false
#| warning: false
#| error: false
#| fig-height: 7
#| fig-width: 8

# women_merged_counted_filtered <- women_merged_counted %>% head(10)
# 
# colors_years <- c("YOB" = "cornflowerblue", "YOD" = "cornflowerblue", "year" ="#000000")
# 
# df_lifetime_info <- df_merged %>% 
#   filter(name %in% women_merged_counted_filtered$name) %>% 
#   select(id, name, YOB, YOD) %>% 
#   pivot_longer(cols = c(YOB, YOD), names_to = "year_type", values_to = "year") #%>% View()
# 
# df_filmographies <- df_merged %>% 
#   filter(!is.na(Titel), name %in% women_merged_counted_filtered$name) %>% 
#   select(id, name, year, Rel, Titel) %>% 
#   mutate(year = as.numeric(year),
#          per_year = row_number(), .by = c("id", "year")) #%>% #View()
#   # pivot_longer(cols = c(YOB, YOD, year), names_to = "year_type", values_to = "year") %>% View()
# 
# # df_filmographies %>% select(Rel) %>% reframe(counted = n(), .by = Rel) %>% arrange(desc(counted))#View()
# colors_relation <- met.brewer("Lakota", n = 6, type = "discrete")
# 
# ggplot() +
#   geom_point(data = df_lifetime_info, aes(x = year, y = 1, color = year_type))+
#   geom_point(data = df_filmographies, aes(x = year, y = 1))+
#   facet_wrap(~name, ncol = 1 ) +
#   # facet_wrap(~name, scales = "free_y", ncol = 1 ) +
#   scale_color_manual(values = colors_years) +
#   theme_b03_base + ffg_facets

#### im vergleich mit der oberen tabelle wirkt es so, als müssten hier eigentlich viel mehr punkte zu sehen sein. 
#### vielleicht muss ich pro jahr counten und punkte stapeln? gerade für aud egede-nissen geht sich das nicht aus. da müssten über 100 punkte zu sehen sein.

## hier interaktiv, bei mouse-over filmtitel anzeigen!
## rollen einfärben? oder erstmal auch nur mouse over? oder diese darstellung einfach ganz auslagern?
## welche rollen tauchen hier auf? welche werden noch gar nicht genannt, obwohl im datensatz vorhanden? 

```

Die obere Grafik eignet sich gut für die Darstellung in welchen Jahren Filme herauskamen, an denen die jeweilige Frau mitgewirkt hat. Sie verschleiert allerdings wie viele Filme es waren. Deshalb hier der Versuch einer anderen Darstellung. 



```{r}
#| echo: false
#| warning: false
#| error: false
#| fig-height: 7
#| fig-width: 10
# ggplot() +
#   geom_point(data = df_lifetime_info, aes(x = year, y = 1, color = year_type))+
#   geom_point(data = df_filmographies, aes(x = year, y = per_year))+
#   facet_wrap(~name, ncol = 1 ) +
#   # facet_wrap(~name, scales = "free_y", ncol = 1 ) +
#   scale_color_manual(values = colors_years) +
#   theme_b03_base + ffg_facets
```


### Als was arbeiteten die Frauen in den Filmen?

```{r}
#| echo: false
#| warning: false
#| error: false
# women_merged_counted_rols <- df_merged %>% 
#   filter(!is.na(Titel)) %>% 
#   # select(Person, name) %>% 
#   # distinct() %>% 
#   reframe(nr_movies = n(), .by = c(name, Rel)) %>% 
#   arrange(desc(nr_movies))
# 
# DT::datatable(women_merged_counted_rols)

### frauen hatten womöglich mehr rollen pro film. was bedeutet das für die analyse? wie kann ich das darstellen?


```




### dff daten: männer-frauen verteilung: einfärbung der rollen




### Netzwerk: Wer arbeitete mit wem?

Knoten, die Frauen repräsentieren sind in grün gezeichnet. Filme in schwarz.
Hier ergeben sich jetzt über die Filme Verbindungen zwischen den Frauen. 

```{r}
#| echo: false
#| warning: false
#| error: false

# test <- df_merged %>% filter(!is.na(Filmwerk)) %>% reframe(counted_films = n(), .by = "Filmwerk") #%>% View()


# nodes_movies <- df_merged %>% filter(!is.na(Filmwerk)) %>% select(Filmwerk, Titel) %>% rename("id" = "Filmwerk", "title" = "Titel")
# nodes_person <- df_merged %>% filter(!is.na(Filmwerk)) %>% select(id, name) %>% rename("title" = "name") %>% mutate(id = as.character(id))
# 
# nodes <- nodes_movies %>% bind_rows(nodes_person) %>% distinct()
# 
# edges <- df_merged %>% filter(!is.na(Filmwerk)) %>% rename("from" = "id", "to" = "Filmwerk")
# 
# graph_data <- edges %>% 
#   as_tbl_graph(., directed = T) %>% 
#   left_join(., nodes, by = c("name" = "id"), copy = T) %>% 
#   activate(nodes) %>%
#   mutate(
#     degree = igraph::degree(.),
#     # indegree = igraph::degree(., mode = "in"),
#     # outdegree = igraph::degree(., mode = "out"),
#     strength = igraph::strength(.),
#     # between_ = igraph::betweenness(.),
#     close = igraph::closeness(.),
#     color = ifelse(nchar(name)== 32, "movie", "person")
#     # group = group_louvain()
#     ) #%>% 

```


```{r}
#| echo: false
#| warning: false
#| error: false
# graph_data %>% as_tibble() %>% View()

# vis_graph_data <- graph_data %>% 
#   activate(nodes) %>%
#   mutate(color = ifelse(color == "movie", "#000000", "#b2df8a"))
# 
# data <- toVisNetworkData(vis_graph_data)
# data$nodes$label = data$nodes$title
# 
# node_names <- data$nodes$title
# 
# network_connected_women <- visNetwork(nodes = data$nodes, edges = data$edges, height = "800px", width = "100%") %>%
#   visIgraphLayout(layout = "layout_with_fr") %>%
#   visOptions(
#     highlightNearest = list(
#       enabled = TRUE,
#       degree = 1,
#       hover = TRUE,
#       labelOnly = TRUE#,
#       
#     ),autoResize = FALSE
#     # nodesIdSelection = list(enabled = TRUE, values = node_names)#, # value from vectir names
#     # selectedBy = "group_name" # dropdowns by group
#   ) %>%
#   visLayout(randomSeed = 0104, improvedLayout = T) %>%
#   visEdges(color = list("color"= "#444444", "opacity" = 0.5)) %>%
#   visPhysics(solver = "hierarchicalRepulsion"#,
#              # forceAtlas2Based = list(gravitationalConstant = 500)
#              ) %>%
#   # visPhysics(solver = "hierarchicalRepulsion") %>%
#   visInteraction(navigationButtons = TRUE)
# 
# network_connected_women

```

## Wikipedia Filmografie der WFPP-Frauen


```{r}
#| echo: false
#| warning: false
#| error: false
# graph_data %>% as_tibble() %>% View()
# filmography_wfpp <- read.csv("../data/wikidata/wfpp-filmography-wikidata.csv")
# 
# wfpp_wikidata_nodes_movies <- filmography_wfpp %>% select(id_film, name_film) %>% rename("id" = "id_film", "title" = "name_film") %>% mutate(type = "film")
# wfpp_wikidata_nodes_person <- filmography_wfpp %>% select(id_person, name_person) %>% rename("title" = "name_person", "id" = "id_person") %>% mutate(type = "person")
# 
# wfpp_wikidata_nodes <- wfpp_wikidata_nodes_movies %>% bind_rows(wfpp_wikidata_nodes_person) %>% distinct()
# 
# wfpp_wikidata_edges <- filmography_wfpp %>% rename("from" = "id_film", "to" = "id_person")
# 
# wfpp_wikidata_graph_data <- wfpp_wikidata_edges %>% 
#   as_tbl_graph(., directed = T) %>% 
#   left_join(., wfpp_wikidata_nodes, by = c("name" = "id"), copy = T) %>% 
#   activate(nodes) %>%
#   mutate(
#     degree = igraph::degree(.),
#     # indegree = igraph::degree(., mode = "in"),
#     # outdegree = igraph::degree(., mode = "out"),
#     strength = igraph::strength(.),
#     # between_ = igraph::betweenness(.),
#     close = igraph::closeness(.),
#     color = type
#     # group = group_louvain()
#     ) #%>% 
# 
# 
# wfpp_wikidata_vis_graph_data <- wfpp_wikidata_graph_data %>% 
#   activate(nodes) %>%
#   mutate(color = ifelse(color == "film", "#000000", "#b2df8a"))
# 
# wfpp_wikidata_data <- toVisNetworkData(wfpp_wikidata_vis_graph_data)
# wfpp_wikidata_data$nodes$label = ""
# 
# wfpp_wikidata_node_names <- wfpp_wikidata_data$nodes$title
# 
# wfpp_wikidata_network_connected_women <- visNetwork(nodes = wfpp_wikidata_data$nodes, edges = wfpp_wikidata_data$edges, height = "1000px", width = "100%") %>%
#   visIgraphLayout(layout = "layout_nicely", randomSeed = 0104) %>%
#   visOptions(
#     highlightNearest = list(
#       enabled = TRUE,
#       degree = 1,
#       hover = TRUE,
#       labelOnly = TRUE
#     ), autoResize = TRUE
#     # nodesIdSelection = list(enabled = TRUE, values = node_names)#, # value from vectir names
#     # selectedBy = "group_name" # dropdowns by group
#   ) %>%
#   # visLayout(randomSeed = 0104, improvedLayout = T) %>%
#   visEdges(color = list("color"= "#444444", "opacity" = 0.5)) %>%
#   visNodes(size = 0.8) %>% 
#   visPhysics(
#     # solver = "hierarchicalRepulsion",
#              forceAtlas2Based = list(gravitationalConstant = 500)
#              ) %>%
#   # visPhysics(solver = "hierarchicalRepulsion") %>%
#   visInteraction(navigationButtons = TRUE)
# 
# wfpp_wikidata_network_connected_women

```


### Vernetzte Frauen aus dem WFPP-Archive

```{r}
#| echo: false
#| warning: false
#| error: false



# wfpp_connected_women <- filmography_wfpp %>% 
#   select(id_person, id_film) %>% 
#   distinct() %>% 
#   mutate(group = cur_group_id(),
#          group_members = n(), .by = id_film)
# 
# wfpp_connected_women_combinations <- wfpp_connected_women %>% 
#   select(id_person, group) %>% 
#   group_by(group) %>% 
#   expand(id_person, id_person, .name_repair = "unique") %>% 
#   ungroup() %>% 
#   filter(`id_person...1` != `id_person...2`) %>% 
#   rowwise() %>%                                
#   mutate(revCheck = str_c(str_sort(c(`id_person...1`, `id_person...2`)), collapse = "")) %>% 
#   group_by(group, revCheck) %>% 
#   slice(1) %>% 
#   ungroup()%>%
#   rename("from" = "id_person...1", "to" = "id_person...2")
# 
# # wfpp_wikidata_edges <- filmography_wfpp %>% rename("from" = "id_film", "to" = "id_person")
# 
# df_wfpp_wikidata_ids <- read_csv("../data/wikidata/women-wfpp.csv") %>% 
#   mutate(id_person = str_extract(item, "Q.*$")) %>% select(-item, "name_person" = "itemLabel")
# 
# wfpp_connected_women_combinations_nodes <- wfpp_connected_women %>% 
#   select(id_person) %>% distinct() %>% 
#   left_join(., df_wfpp_wikidata_ids)
#   
# 
# wfpp_wikidata_graph_data_w <- wfpp_connected_women_combinations %>% 
#   as_tbl_graph(., directed = F) %>% 
#   activate(nodes) %>% #as_tibble() %>% View()
#   left_join(., wfpp_connected_women_combinations_nodes, by = c("name" = "id_person"), copy = T) %>%
#   mutate(
#     degree = igraph::degree(.),
#     # indegree = igraph::degree(., mode = "in"),
#     # outdegree = igraph::degree(., mode = "out"),
#     strength = igraph::strength(.),
#     between_ = igraph::betweenness(.),
#     close = igraph::closeness(.),
#     title = name_person
#     # group = group_louvain()
#     ) #%>% 
# 
# 
# # wfpp_wikidata_vis_graph_data <- wfpp_wikidata_graph_data %>% 
# #   activate(nodes) %>%
# #   mutate(color = ifelse(color == "film", "#000000", "#b2df8a"))
# 
# wfpp_wikidata_data_w <- toVisNetworkData(wfpp_wikidata_graph_data_w)
# wfpp_wikidata_data_w$nodes$label = ""
# 
# # wfpp_wikidata_node_names_w <- wfpp_wikidata_data_w$nodes$title
# 
# wfpp_wikidata_network_connected_women_w <- visNetwork(nodes = wfpp_wikidata_data_w$nodes, edges = wfpp_wikidata_data_w$edges, height = "1000px", width = "100%") %>%
#   visIgraphLayout(layout = "layout_nicely", randomSeed = 0104) %>%
#   visOptions(
#     highlightNearest = list(
#       enabled = TRUE,
#       degree = 1,
#       hover = TRUE,
#       labelOnly = TRUE
#     ), autoResize = TRUE
#     # nodesIdSelection = list(enabled = TRUE, values = node_names)#, # value from vectir names
#     # selectedBy = "group_name" # dropdowns by group
#   ) %>%
#   # visLayout(randomSeed = 0104, improvedLayout = T) %>%
#   visEdges(color = list("color"= "#444444", "opacity" = 0.5)) %>%
#   visNodes(size = 2) %>% 
#   visPhysics(
#     # solver = "hierarchicalRepulsion",
#              forceAtlas2Based = list(gravitationalConstant = 500)
#              ) %>%
#   # visPhysics(solver = "hierarchicalRepulsion") %>%
#   visInteraction(navigationButtons = TRUE)
# 
# wfpp_wikidata_network_connected_women_w

```

### Vernetzte Frauen aus dem DFF-Archiv

```{r}
#| echo: false
#| warning: false
#| error: false


# load(file = "../data/doc/graph_data_connected_women_dff.RData")
# 
# filtered_graph_data_connected_women_dff <- graph_data_connected_women_dff %>% 
#   filter(degree> 9, between_ > 1)
# 
# dff_data <- toVisNetworkData(graph_data_connected_women_dff)
# dff_data$nodes$label = ""
# 
# # wfpp_wikidata_node_names_w <- wfpp_wikidata_data_w$nodes$title
# 
# dff_network <- visNetwork(nodes = dff_data$nodes, edges = dff_data$edges, height = "1000px", width = "100%") %>%
#   visIgraphLayout(layout = "layout_with_lgl", randomSeed = 0104) %>%
#   visOptions(
#     highlightNearest = list(
#       enabled = TRUE,
#       degree = 1,
#       hover = TRUE,
#       labelOnly = TRUE
#     ), autoResize = TRUE
#     # nodesIdSelection = list(enabled = TRUE, values = node_names)#, # value from vectir names
#     # selectedBy = "group_name" # dropdowns by group
#   ) %>%
#   # visLayout(randomSeed = 0104, improvedLayout = T) %>%
#   visEdges(color = list("color"= "#444444", "opacity" = 0.7)) %>%
#   visNodes(color = list("opacity" = 0.8)) %>% 
#   # visPhysics(
#   #   solver = "hierarchicalRepulsion",
#              # forceAtlas2Based = list(gravitationalConstant = 500)
#              # ) %>%
#   # visPhysics(solver = "hierarchicalRepulsion") %>%
#   visInteraction(navigationButtons = TRUE)
# 
# dff_network


# filtered_graph_data_connected_women_dff %>% 
#   ggraph(layout = "fr")+
#   geom_edge_link() +
#   geom_node_point(aes(size = between_), alpha = 0.8) 

```




